// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: proto/jaegerGoTest.proto

/*
Package jaegerGoTest is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package jaegerGoTest

import (
	"context"
	"errors"
	"io"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/v2/utilities"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// Suppress "imported and not used" errors
var (
	_ codes.Code
	_ io.Reader
	_ status.Status
	_ = errors.New
	_ = runtime.String
	_ = utilities.NewDoubleArray
	_ = metadata.Join
)

func request_JaegerGoTest_StreamedContinuous_0(ctx context.Context, marshaler runtime.Marshaler, client JaegerGoTestClient, req *http.Request, pathParams map[string]string) (JaegerGoTest_StreamedContinuousClient, runtime.ServerMetadata, error) {
	var (
		protoReq StreamedContinuousRequest
		metadata runtime.ServerMetadata
	)
	if req.Body != nil {
		_, _ = io.Copy(io.Discard, req.Body)
	}
	stream, err := client.StreamedContinuous(ctx, &protoReq)
	if err != nil {
		return nil, metadata, err
	}
	header, err := stream.Header()
	if err != nil {
		return nil, metadata, err
	}
	metadata.HeaderMD = header
	return stream, metadata, nil
}

func request_JaegerGoTest_StreamedSporadic_0(ctx context.Context, marshaler runtime.Marshaler, client JaegerGoTestClient, req *http.Request, pathParams map[string]string) (JaegerGoTest_StreamedSporadicClient, runtime.ServerMetadata, error) {
	var (
		protoReq StreamedSporadicRequest
		metadata runtime.ServerMetadata
	)
	if req.Body != nil {
		_, _ = io.Copy(io.Discard, req.Body)
	}
	stream, err := client.StreamedSporadic(ctx, &protoReq)
	if err != nil {
		return nil, metadata, err
	}
	header, err := stream.Header()
	if err != nil {
		return nil, metadata, err
	}
	metadata.HeaderMD = header
	return stream, metadata, nil
}

// RegisterJaegerGoTestHandlerServer registers the http handlers for service JaegerGoTest to "mux".
// UnaryRPC     :call JaegerGoTestServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterJaegerGoTestHandlerFromEndpoint instead.
// GRPC interceptors will not work for this type of registration. To use interceptors, you must use the "runtime.WithMiddlewares" option in the "runtime.NewServeMux" call.
func RegisterJaegerGoTestHandlerServer(ctx context.Context, mux *runtime.ServeMux, server JaegerGoTestServer) error {
	mux.Handle(http.MethodGet, pattern_JaegerGoTest_StreamedContinuous_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		err := status.Error(codes.Unimplemented, "streaming calls are not yet supported in the in-process transport")
		_, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
		return
	})

	mux.Handle(http.MethodGet, pattern_JaegerGoTest_StreamedSporadic_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		err := status.Error(codes.Unimplemented, "streaming calls are not yet supported in the in-process transport")
		_, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
		return
	})

	return nil
}

// RegisterJaegerGoTestHandlerFromEndpoint is same as RegisterJaegerGoTestHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterJaegerGoTestHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.NewClient(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()
	return RegisterJaegerGoTestHandler(ctx, mux, conn)
}

// RegisterJaegerGoTestHandler registers the http handlers for service JaegerGoTest to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterJaegerGoTestHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterJaegerGoTestHandlerClient(ctx, mux, NewJaegerGoTestClient(conn))
}

// RegisterJaegerGoTestHandlerClient registers the http handlers for service JaegerGoTest
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "JaegerGoTestClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "JaegerGoTestClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "JaegerGoTestClient" to call the correct interceptors. This client ignores the HTTP middlewares.
func RegisterJaegerGoTestHandlerClient(ctx context.Context, mux *runtime.ServeMux, client JaegerGoTestClient) error {
	mux.Handle(http.MethodGet, pattern_JaegerGoTest_StreamedContinuous_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateContext(ctx, mux, req, "/jaegerGoTest.JaegerGoTest/StreamedContinuous", runtime.WithHTTPPathPattern("/streamed-continuous"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_JaegerGoTest_StreamedContinuous_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_JaegerGoTest_StreamedContinuous_0(annotatedContext, mux, outboundMarshaler, w, req, func() (proto.Message, error) { return resp.Recv() }, mux.GetForwardResponseOptions()...)
	})
	mux.Handle(http.MethodGet, pattern_JaegerGoTest_StreamedSporadic_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateContext(ctx, mux, req, "/jaegerGoTest.JaegerGoTest/StreamedSporadic", runtime.WithHTTPPathPattern("/streamed-sporadic"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_JaegerGoTest_StreamedSporadic_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_JaegerGoTest_StreamedSporadic_0(annotatedContext, mux, outboundMarshaler, w, req, func() (proto.Message, error) { return resp.Recv() }, mux.GetForwardResponseOptions()...)
	})
	return nil
}

var (
	pattern_JaegerGoTest_StreamedContinuous_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"streamed-continuous"}, ""))
	pattern_JaegerGoTest_StreamedSporadic_0   = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"streamed-sporadic"}, ""))
)

var (
	forward_JaegerGoTest_StreamedContinuous_0 = runtime.ForwardResponseStream
	forward_JaegerGoTest_StreamedSporadic_0   = runtime.ForwardResponseStream
)
