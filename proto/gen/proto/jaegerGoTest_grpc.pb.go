// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/jaegerGoTest.proto

package jaegerGoTest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JaegerGoTest_StreamedContinuous_FullMethodName = "/jaegerGoTest.JaegerGoTest/StreamedContinuous"
	JaegerGoTest_StreamedSporadic_FullMethodName   = "/jaegerGoTest.JaegerGoTest/StreamedSporadic"
)

// JaegerGoTestClient is the client API for JaegerGoTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JaegerGoTestClient interface {
	StreamedContinuous(ctx context.Context, in *StreamedContinuousRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamedContinuousResponse], error)
	StreamedSporadic(ctx context.Context, in *StreamedSporadicRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamedSporadicResponse], error)
}

type jaegerGoTestClient struct {
	cc grpc.ClientConnInterface
}

func NewJaegerGoTestClient(cc grpc.ClientConnInterface) JaegerGoTestClient {
	return &jaegerGoTestClient{cc}
}

func (c *jaegerGoTestClient) StreamedContinuous(ctx context.Context, in *StreamedContinuousRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamedContinuousResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JaegerGoTest_ServiceDesc.Streams[0], JaegerGoTest_StreamedContinuous_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamedContinuousRequest, StreamedContinuousResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JaegerGoTest_StreamedContinuousClient = grpc.ServerStreamingClient[StreamedContinuousResponse]

func (c *jaegerGoTestClient) StreamedSporadic(ctx context.Context, in *StreamedSporadicRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamedSporadicResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JaegerGoTest_ServiceDesc.Streams[1], JaegerGoTest_StreamedSporadic_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamedSporadicRequest, StreamedSporadicResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JaegerGoTest_StreamedSporadicClient = grpc.ServerStreamingClient[StreamedSporadicResponse]

// JaegerGoTestServer is the server API for JaegerGoTest service.
// All implementations must embed UnimplementedJaegerGoTestServer
// for forward compatibility.
type JaegerGoTestServer interface {
	StreamedContinuous(*StreamedContinuousRequest, grpc.ServerStreamingServer[StreamedContinuousResponse]) error
	StreamedSporadic(*StreamedSporadicRequest, grpc.ServerStreamingServer[StreamedSporadicResponse]) error
	mustEmbedUnimplementedJaegerGoTestServer()
}

// UnimplementedJaegerGoTestServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJaegerGoTestServer struct{}

func (UnimplementedJaegerGoTestServer) StreamedContinuous(*StreamedContinuousRequest, grpc.ServerStreamingServer[StreamedContinuousResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamedContinuous not implemented")
}
func (UnimplementedJaegerGoTestServer) StreamedSporadic(*StreamedSporadicRequest, grpc.ServerStreamingServer[StreamedSporadicResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamedSporadic not implemented")
}
func (UnimplementedJaegerGoTestServer) mustEmbedUnimplementedJaegerGoTestServer() {}
func (UnimplementedJaegerGoTestServer) testEmbeddedByValue()                      {}

// UnsafeJaegerGoTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JaegerGoTestServer will
// result in compilation errors.
type UnsafeJaegerGoTestServer interface {
	mustEmbedUnimplementedJaegerGoTestServer()
}

func RegisterJaegerGoTestServer(s grpc.ServiceRegistrar, srv JaegerGoTestServer) {
	// If the following call pancis, it indicates UnimplementedJaegerGoTestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JaegerGoTest_ServiceDesc, srv)
}

func _JaegerGoTest_StreamedContinuous_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamedContinuousRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JaegerGoTestServer).StreamedContinuous(m, &grpc.GenericServerStream[StreamedContinuousRequest, StreamedContinuousResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JaegerGoTest_StreamedContinuousServer = grpc.ServerStreamingServer[StreamedContinuousResponse]

func _JaegerGoTest_StreamedSporadic_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamedSporadicRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JaegerGoTestServer).StreamedSporadic(m, &grpc.GenericServerStream[StreamedSporadicRequest, StreamedSporadicResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JaegerGoTest_StreamedSporadicServer = grpc.ServerStreamingServer[StreamedSporadicResponse]

// JaegerGoTest_ServiceDesc is the grpc.ServiceDesc for JaegerGoTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JaegerGoTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jaegerGoTest.JaegerGoTest",
	HandlerType: (*JaegerGoTestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamedContinuous",
			Handler:       _JaegerGoTest_StreamedContinuous_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamedSporadic",
			Handler:       _JaegerGoTest_StreamedSporadic_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/jaegerGoTest.proto",
}
